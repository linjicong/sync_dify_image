name: Sync Docker Images to Alibaba Cloud from Docker Compose

on:
  push:
    branches:
      - main

jobs:
  sync-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code from Dify repo
      uses: actions/checkout@v3
      with:
        repository: langgenius/dify
        path: dify-repo
        ref: 1.9.2
        
    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.27.3/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Parse docker-compose.yaml for images
      id: parse_docker_compose
      run: |
        images=$(yq e '.services[].image' dify-repo/docker/docker-compose.yaml | tr '\n' ' ')
        echo "Images: $images"
        echo "images_list=$images" >> $GITHUB_OUTPUT

    - name: Log in to Alibaba Cloud ACR
      run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_REGISTRY }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Install skopeo for image checking
      run: |
        sudo apt-get update
        sudo apt-get install -y skopeo

    - name: Enhanced image sync with parallel processing
      run: |
        images="${{ steps.parse_docker_compose.outputs.images_list }}"
        
        # 定义处理单个镜像的函数
        process_image() {
          local image=$1
          
          if [ -z "$image" ] || [ "$image" = "null" ]; then
            echo "Skipping empty or null image."
            return
          fi
          
          # 跳过vastdata/vastbase-vector镜像
          if [[ "$image" == vastdata/vastbase-vector* ]]; then
            echo "Skipping image: $image"
            return
          fi
          
          echo "=== Processing image: $image ==="
          
          local image_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          local acr_image="${{ secrets.ACR_REGISTRY }}/linjicong/$image_tag"
          
          # 检查镜像是否存在
          if skopeo inspect --creds="${{ secrets.ACR_USERNAME }}:${{ secrets.ACR_PASSWORD }}" "docker://$acr_image" > /dev/null 2>&1; then
            echo "✅ Image already exists in ACR: $acr_image"
            return
          fi
          
          echo "🔄 Image not found, syncing: $image -> $acr_image"
          
          # 执行同步操作
          if docker pull --platform linux/amd64 "$image" && \
             docker tag "$image" "$acr_image" && \
             docker push "$acr_image"; then
            echo "✅ Successfully synced: $acr_image"
            docker rmi "$image" "$acr_image" 2>/dev/null || true
          else
            echo "❌ Failed to sync: $image"
          fi
        }
        
        export -f process_image
        export ACR_REGISTRY="${{ secrets.ACR_REGISTRY }}"
        export ACR_USERNAME="${{ secrets.ACR_USERNAME }}"
        export ACR_PASSWORD="${{ secrets.ACR_PASSWORD }}"
        
        # 并行处理镜像（限制并发数）
        echo "$images" | tr ' ' '\n' | xargs -I {} -P 2 bash -c 'process_image "$@"' _ {}
        
        docker image prune -f
