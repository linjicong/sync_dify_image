name: Sync Docker Images to Alibaba Cloud from Docker Compose

on:
  push:
    branches:
      - main

jobs:
  sync-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code from Dify repo
      uses: actions/checkout@v3
      with:
        repository: langgenius/dify
        path: dify-repo
        ref: '1.0.0'

    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.27.3/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Parse docker-compose.yaml for images
      id: parse_docker_compose
      run: |
        images=$(yq e '.services[].image' dify-repo/docker/docker-compose.yaml | tr '\n' ' ')
        echo "Images: $images"
        echo "::set-output name=images::$images"

    - name: Log in to Alibaba Cloud ACR
      run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_REGISTRY }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

    # - name: Set up cache directory
    #   run: |
    #     mkdir -p /tmp/docker-cache

    # - name: Cache Docker images
    #   uses: actions/cache@v2
    #   with:
    #     path: /tmp/docker-cache
    #     key: ${{ runner.os }}-docker-${{ hashFiles('**/docker-compose.yaml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-docker-

    - name: Pull and push images to Alibaba Cloud ACR
      run: |
        images="${{ steps.parse_docker_compose.outputs.images }}"
        if [ -z $images ]; then
          echo "No images to process."
        else
          for image in $images; do
            if [ -z "$image" ] || [ "$image" = "null" ]; then
              echo "Skipping empty or null image."
              continue
            fi
            echo "Processing image: $image"

            # Generate a unique cache file name based on the image
            # cache_file=$(echo $image | sha256sum | cut -d' ' -f1).tar

            # # Check if image is in cache
            # if [ -f /tmp/docker-cache/$cache_file ]; then
            #   echo "Restoring cached image: $image"
            #   docker load -i /tmp/docker-cache/$cache_file
            # else
              echo "Pulling image from DockerHub: $image"
              docker pull $image
              # echo "Saving image to cache: $image"
              # docker save $image > /tmp/docker-cache/$cache_file
            # fi

            # Extract image tag (last part)
            image_tag=$(echo $image | awk -F'/' '{print $NF}')

            # Tag the image for ACR
            acr_image="${{ secrets.ACR_REGISTRY }}/linjicong/$image_tag"
            echo "Tagging image: $acr_image"
            docker tag $image $acr_image

            docker rmi $image

            # Push the image to ACR
            echo "Pushing image to ACR: $acr_image"
            docker push $acr_image

            docker rmi $acr_image
          done
        fi
